
#!/bin/bash

# This script creates a temp file in a temp directory and allows 2 different users to read same file but cannot delete it. only another script can delete this file that can be run by admin/owner only.
# This script does not checks for negative cases (which is easy to check by checking result status code and checking for 0)

# Execution parameters allowed
create="create"
remove="remove"
# Shared variables
shared_dir="shared_dir"
shared_file="shared_file.txt"
# User Group and User variables. For simplicity, group and user names are hardcoded to avoid runtime issues. Logic can be improved easily to handle conflict issues by adding flags to commands.
shared_group="Share_Group"
user_1="user1"
user_1_passwd="password1"
user_2="user2"
user_2_passwd="password2"
default_user_life="" # for safety


function createshareddirandfile() {
  echo "Creating shared directory and file ..."
  mkdir ~/${shared_dir}
  cd ~/${shared_dir}
  touch ${shared_file}
}

function assignprivilegestodirandfile() {
  echo "Assigning necessary privileges to directory and file ..."
  chmod +rwx ~/${shared_dir}
}

function createusergroupandusers() {
  echo "Creating necessary user group ${shared_group} and users ..."
  groupadd ${shared_group}
  useradd ${user_1} -b ~/${shared_dir} -d ~/${shared_dir}/${user_1} -g ${shared_group} -p ${user_1_passwd}
  useradd ${user_2} -b ~/${shared_dir} -d ~/${shared_dir}/${user_2} -g ${shared_group} -p ${user_2_passwd} 
}

function assignprivilegestousers() {
  echo "Assinging necessary privileges to users ..."
  echo "DEBUG ENABLED ==================="
  whoami
  su - ${user_1}
  expect "assword"
  send ${user_1_passwd}
  whoami
  logout
  whoami	
  echo "DEBUG DISABLED ==================="
}

function removeusersandusergroup() {
  echo "Removing user group and users ..."
  userdel ${user_1} -r -f
  userdel ${user_2} -r -f
  groupdel ${shared_group}
}

function removefileanddir() {
  echo "Removing shared file and directory ..."
  rm -rf ${shared_dir} 
}

#-----------------------------------------------
function create() {
  createshareddirandfile
  assignprivilegestodirandfile
  createusergroupandusers
  assignprivilegestousers
}

function remove() {
  removeusersandusergroup
  removefileanddir
}

function printoptions() {
  echo "Invalid Inputs! Only 2 options available for execution of this script"
  echo -e "\t- ${create} : Create shared directory/file and users."
  echo -e "\t- ${remove} : Remove shared directory/file and users.\n"
}

#-------------------Execution----------------------------
if [ $# == 0 ]; then
  printoptions
elif [ ${1} == ${create} ]; then
  echo "Creating ..."
  create
  echo "Done!"
elif [ ${1} == ${remove} ]; then
  echo "Removing ..."
  remove
  echo "Done!"
else
  printoptions
fi 

